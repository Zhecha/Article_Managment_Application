{"ast":null,"code":"import axios from 'axios';\nimport * as header from '../../constants/headers';\nimport { deleteUser } from './AppActions';\nexport const updateDisabled = isDisabled => {\n  return {\n    type: 'UPDATE_DISABLED',\n    payload: {\n      isDisabled\n    }\n  };\n};\nexport const updateField = value => {\n  return {\n    type: 'UPDATE_FIELD',\n    payload: {\n      value\n    }\n  };\n};\n\nconst viewErrors = message => {\n  return {\n    type: 'VIEW_ERRORS',\n    payload: {\n      message\n    }\n  };\n};\n\nconst loadComments = comments => {\n  return {\n    type: 'LOAD_COMMENTS',\n    payload: {\n      comments\n    }\n  };\n};\n\nexport const updateComment = comment => {\n  return {\n    type: 'UPDATE_COMMENTS',\n    payload: {\n      comment\n    }\n  };\n};\nexport const createComment = (url, token, comment) => {\n  return async dispatch => {\n    try {\n      const newComment = await axios.post(url, comment, header.headerPostPut(token));\n      dispatch(updateComment(newComment.data));\n    } catch (error) {\n      const message = error.response.data.message;\n      const isInvalidToken = error.response.data.isInvalidToken;\n\n      if (isInvalidToken) {\n        error.isInvalidToken = isInvalidToken;\n        dispatch(deleteUser());\n        throw error;\n      } else {\n        dispatch(viewErrors(message));\n        throw error;\n      }\n    }\n  };\n};\nexport const getComments = (url, token) => {\n  return async dispatch => {\n    try {\n      const comments = await axios.get(url, header.headerGet(token));\n      dispatch(loadComments(comments.data));\n    } catch (error) {\n      const isInvalidToken = error.response.data.isInvalidToken;\n\n      if (isInvalidToken) {\n        error.isInvalidToken = isInvalidToken;\n        dispatch(deleteUser());\n        throw error;\n      } else {\n        throw error;\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/media/user/HDD/taskList/client/src/redux/actions/CommentActions.js"],"names":["axios","header","deleteUser","updateDisabled","isDisabled","type","payload","updateField","value","viewErrors","message","loadComments","comments","updateComment","comment","createComment","url","token","dispatch","newComment","post","headerPostPut","data","error","response","isInvalidToken","getComments","get","headerGet"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,yBAAxB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAEA,OAAO,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AAC1C,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHC,IAAAA,OAAO,EAAE;AACLF,MAAAA;AADK;AAFN,GAAP;AAMH,CAPM;AASP,OAAO,MAAMG,WAAW,GAAIC,KAAD,IAAW;AAElC,SAAO;AACHH,IAAAA,IAAI,EAAE,cADH;AAEHC,IAAAA,OAAO,EAAE;AACLE,MAAAA;AADK;AAFN,GAAP;AAMH,CARM;;AAUP,MAAMC,UAAU,GAAIC,OAAD,IAAa;AAC5B,SAAO;AACHL,IAAAA,IAAI,EAAE,aADH;AAEHC,IAAAA,OAAO,EAAE;AACLI,MAAAA;AADK;AAFN,GAAP;AAMH,CAPD;;AAWA,MAAMC,YAAY,GAAIC,QAAD,IAAc;AAC/B,SAAO;AACHP,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,OAAO,EAAE;AACLM,MAAAA;AADK;AAFN,GAAP;AAMH,CAPD;;AASA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACtC,SAAO;AACHT,IAAAA,IAAI,EAAE,iBADH;AAEHC,IAAAA,OAAO,EAAE;AACLQ,MAAAA;AADK;AAFN,GAAP;AAMH,CAPM;AASP,OAAO,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaH,OAAb,KAAyB;AAClD,SAAO,MAAMI,QAAN,IAAmB;AACtB,QAAI;AACA,YAAMC,UAAU,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAWJ,GAAX,EAAgBF,OAAhB,EAAyBb,MAAM,CAACoB,aAAP,CAAqBJ,KAArB,CAAzB,CAAzB;AACAC,MAAAA,QAAQ,CAACL,aAAa,CAACM,UAAU,CAACG,IAAZ,CAAd,CAAR;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,YAAMb,OAAO,GAAGa,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBZ,OAApC;AACA,YAAMe,cAAc,GAAGF,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,cAA3C;;AACA,UAAGA,cAAH,EAAkB;AACdF,QAAAA,KAAK,CAACE,cAAN,GAAuBA,cAAvB;AACAP,QAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACA,cAAMqB,KAAN;AACH,OAJD,MAIO;AACHL,QAAAA,QAAQ,CAACT,UAAU,CAACC,OAAD,CAAX,CAAR;AACA,cAAMa,KAAN;AACH;AACJ;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMG,WAAW,GAAG,CAACV,GAAD,EAAMC,KAAN,KAAgB;AACvC,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAI;AACA,YAAMN,QAAQ,GAAG,MAAMZ,KAAK,CAAC2B,GAAN,CAAUX,GAAV,EAAef,MAAM,CAAC2B,SAAP,CAAiBX,KAAjB,CAAf,CAAvB;AACAC,MAAAA,QAAQ,CAACP,YAAY,CAACC,QAAQ,CAACU,IAAV,CAAb,CAAR;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,YAAME,cAAc,GAAGF,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,cAA3C;;AACA,UAAGA,cAAH,EAAkB;AACdF,QAAAA,KAAK,CAACE,cAAN,GAAuBA,cAAvB;AACAP,QAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACA,cAAMqB,KAAN;AACH,OAJD,MAIO;AACH,cAAMA,KAAN;AACH;AACJ;AACJ,GAdD;AAeH,CAhBM","sourcesContent":["import axios from 'axios';\nimport * as header from '../../constants/headers';\nimport {deleteUser} from './AppActions';\n\nexport const updateDisabled = (isDisabled) => {\n    return {\n        type: 'UPDATE_DISABLED',\n        payload: {\n            isDisabled\n        }\n    }\n}\n\nexport const updateField = (value) => {\n\n    return {\n        type: 'UPDATE_FIELD',\n        payload: {\n            value\n        }\n    }\n}\n\nconst viewErrors = (message) => {\n    return {\n        type: 'VIEW_ERRORS',\n        payload: {\n            message\n        }\n    }\n}\n\n\n\nconst loadComments = (comments) => {\n    return {\n        type: 'LOAD_COMMENTS',\n        payload: {\n            comments\n        }\n    }\n}\n\nexport const updateComment = (comment) => {\n    return {\n        type: 'UPDATE_COMMENTS',\n        payload: {\n            comment\n        }\n    }\n}\n\nexport const createComment = (url, token, comment) => {\n    return async(dispatch) => {\n        try {\n            const newComment = await axios.post(url, comment, header.headerPostPut(token));\n            dispatch(updateComment(newComment.data));\n        } catch (error) {\n            const message = error.response.data.message;\n            const isInvalidToken = error.response.data.isInvalidToken;\n            if(isInvalidToken){\n                error.isInvalidToken = isInvalidToken;\n                dispatch(deleteUser());\n                throw error;\n            } else {\n                dispatch(viewErrors(message));\n                throw error\n            }\n        }\n    }\n}\n\nexport const getComments = (url, token) => {\n    return async(dispatch) => {\n        try {\n            const comments = await axios.get(url, header.headerGet(token));\n            dispatch(loadComments(comments.data))\n        } catch (error) {\n            const isInvalidToken = error.response.data.isInvalidToken;\n            if(isInvalidToken){\n                error.isInvalidToken = isInvalidToken;\n                dispatch(deleteUser());\n                throw error;\n            } else {\n                throw error\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}