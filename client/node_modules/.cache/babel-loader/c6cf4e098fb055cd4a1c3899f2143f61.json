{"ast":null,"code":"import axios from 'axios';\nimport { deleteUser } from '../actions/AppActions';\nimport * as urls from '../../constants/urls';\nimport * as header from '../../constants/headers';\nexport const loadPagesData = page => {\n  return {\n    type: 'LOAD_PAGES_DATA',\n    payload: {\n      page\n    }\n  };\n};\nexport const updateError = isError => {\n  return {\n    type: 'UPDATE_ERROR',\n    payload: {\n      isError\n    }\n  };\n};\nexport const updateSort = isDesc => {\n  return {\n    type: 'UPDATE_SORT',\n    payload: {\n      isDesc\n    }\n  };\n};\nexport const updateSortBy = sortBy => {\n  return {\n    type: 'UPDATE_SORT_BY',\n    payload: {\n      sortBy\n    }\n  };\n};\nexport const getPagesData = (token, pageNumber, limit, sort, sortBy) => {\n  return async dispatch => {\n    try {\n      let url = null;\n\n      if (sortBy === 'title') {\n        url = urls.urlPageNumberSortByTitle(pageNumber, limit, sort, sortBy);\n      } else if (sortBy === 'body') {\n        url = urls.urlPageNumberSortByBody(pageNumber, limit, sort, sortBy);\n      } else {\n        url = urls.urlPageNumberSort(pageNumber, limit, sort);\n      }\n\n      const page = await axios.get(url, header.headerGet(token));\n\n      if (page.data.articles.length) {\n        dispatch(loadPagesData(page.data));\n        return page.data;\n      } else {\n        dispatch(loadPagesData({\n          articles: [],\n          total: page.data.total,\n          currentPage: page.data.currentPage,\n          perPage: page.data.perPage\n        }));\n        return {\n          articles: [],\n          total: page.data.total,\n          currentPage: page.data.currentPage,\n          perPage: page.data.perPage\n        };\n      }\n    } catch (error) {\n      const isInvalidToken = error.response.data.isInvalidToken;\n\n      if (isInvalidToken) {\n        error.isInvalidToken = isInvalidToken;\n        dispatch(deleteUser());\n        throw error;\n      } else {\n        throw error;\n      }\n    }\n  };\n};\nexport const updatePrivateProperty = isOnlyPrivate => {\n  return {\n    type: 'UPDATE_PRIVATE_PROPERTY',\n    payload: {\n      isOnlyPrivate\n    }\n  };\n};","map":{"version":3,"sources":["/media/user/HDD/taskList/client/src/redux/actions/PageActions.js"],"names":["axios","deleteUser","urls","header","loadPagesData","page","type","payload","updateError","isError","updateSort","isDesc","updateSortBy","sortBy","getPagesData","token","pageNumber","limit","sort","dispatch","url","urlPageNumberSortByTitle","urlPageNumberSortByBody","urlPageNumberSort","get","headerGet","data","articles","length","total","currentPage","perPage","error","isInvalidToken","response","updatePrivateProperty","isOnlyPrivate"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {deleteUser} from '../actions/AppActions';\nimport * as urls from '../../constants/urls';\nimport * as header from '../../constants/headers';\n\nexport const loadPagesData = (page) => {\n    return {\n        type: 'LOAD_PAGES_DATA',\n        payload: {\n            page\n        }\n    }\n}\n\nexport const updateError = (isError) => {\n    return {\n        type: 'UPDATE_ERROR',\n        payload: {\n            isError\n        }\n    }\n}\n\nexport const updateSort = (isDesc) => {\n    return {\n        type: 'UPDATE_SORT',\n        payload: {\n            isDesc\n        }\n    }\n}\n\nexport const updateSortBy = (sortBy) => {\n    return {\n        type: 'UPDATE_SORT_BY',\n        payload: {\n            sortBy\n        }\n    }\n}\n\nexport const getPagesData = (token, pageNumber, limit, sort, sortBy) => { \n\n    return async(dispatch) => {\n        try {\n            let url = null;\n            if(sortBy === 'title'){\n                url = urls.urlPageNumberSortByTitle(pageNumber,limit,sort,sortBy)\n            } else if( sortBy === 'body') {\n                url = urls.urlPageNumberSortByBody(pageNumber,limit,sort,sortBy)\n            } else {\n                url = urls.urlPageNumberSort(pageNumber,limit,sort);\n            } \n            const page = await axios.get(url, header.headerGet(token));\n            if(page.data.articles.length){\n                dispatch(loadPagesData(page.data))\n                return page.data\n            } else {\n                dispatch(loadPagesData({articles:[],total: page.data.total, currentPage: page.data.currentPage, perPage: page.data.perPage}))\n                return {articles:[],total: page.data.total, currentPage: page.data.currentPage, perPage: page.data.perPage}\n            }\n        } catch (error) {\n            const isInvalidToken = error.response.data.isInvalidToken;\n            if(isInvalidToken){\n                error.isInvalidToken = isInvalidToken;\n                dispatch(deleteUser());\n                throw error;\n            } else {\n                throw error;\n            }\n        }\n    }\n}\n\nexport const updatePrivateProperty = (isOnlyPrivate) => {\n    return {\n        type: 'UPDATE_PRIVATE_PROPERTY',\n        payload: {\n            isOnlyPrivate\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}